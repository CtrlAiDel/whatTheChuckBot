"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.ExtendedClient=void 0;const tslib_1=require("tslib"),discord_js_1=require("discord.js"),glob_1=(0,tslib_1.__importDefault)(require("glob")),__1=require(".."),path_1=require("path"),util_1=require("util"),promises_1=require("node:fs/promises"),AppLogger_1=require("../tools/class/AppLogger"),globPromise=(0,util_1.promisify)(glob_1.default);class ExtendedClient extends discord_js_1.Client{commands=new discord_js_1.Collection;clientsloggers=new discord_js_1.Collection;devlogger=new AppLogger_1.AppLogger("dev",process.env.botToken);applogger=new AppLogger_1.AppLogger("app",process.env.botToken,"warn");constructor(){super({intents:32767})}async start(){await this.registerModules(),await this.registerBaseListener(),await this.login(process.env.botToken),this.emit("warn","\n\n|--------Bot is online!--------|\n\n")}async registerModules(){await this.registerEventListerFromDir(__dirname+"/../events/");const t=await this.getSlashCommandsFromDir(__dirname+"/../commands/");this.on("ready",async()=>{let e=process.env.guildIds.split(",");await e.forEach(e=>{this.registerCommands({commands:t,guildId:e}),this.addClientLogger(e)})})}async registerBaseListener(){this.on("interactionCreate",e=>{var t=e?.guildId;this.clientsloggers?.has(t)&&(t=this.clientsloggers.get(t).logger,this.clientInteractionInfos(e,t))}),this.on("debug",e=>{console.debug(e),this.devlogger?.logger?.info(e)}),this.on("warn",e=>{console.warn(e),this.applogger?.logger?.warn(e),this.devlogger?.logger?.warn(e)}),this.on("error",e=>{console.error(e),this.applogger?.logger?.error(e),this.devlogger?.logger?.error(e)})}async registerCommands({commands:e,guildId:t}){t?(this.guilds.cache.get(t)?.commands.set(e),this.emit("warn","Registering commands to "+t)):(this.application?.commands.set(e),this.emit("warn","Registering global commands"))}resolveLogtoClient(e,t){this.logToClient(e,t)}addClientLogger(e){this.clientsloggers?.has(e)?(this.emit("warn","Logger "+e+" already in the collection..."),this.emit("debug","This logger already have a stream...")):(this.clientsloggers.set(e,new AppLogger_1.AppLogger("client",e,"info")),this.emit("debug","Your Client-logger: is online!"),this.emit("warn",`Client-logger ${e}: is online!`))}logToClient(e,t){this.clientsloggers?.has(e)&&(this.emit("debug",`Login to client ${e}: `+t),this.clientsloggers.get(e).logger.info(t))}async getSlashCommandsFromDir(e){const t=[],i=await this.getFiles(e).then(e=>(console.warn(e),e)).catch(e=>console.error(e));return await i.forEach(async e=>{!/^[^.]+\.js$|^[^.]+\.ts$/gm.exec(e)||(e=await this.importFile(e)).name&&(this.emit("debug",JSON.stringify(e)),this.commands.set(e.name,e),t.push(e))}),t}async registerEventListerFromDir(e){const t=await this.getFiles(e).then(e=>(console.warn(e),e)).catch(e=>console.error(e));await t.forEach(async e=>{/^[^.]+\.js$|^[^.]+\.ts$/gm.exec(e)&&(e=await this.importFile(e),this.on(e.event,e.run))})}async importSubCommandFile(e,t,i){let s=__dirname+"/../subCommands/"+e;if(i&&(s+="/"+i),s+="/"+t,1===(await globPromise(s+"{.ts,.js}")).length)return this.importFile(s)}async getCommandsHelp(){let t="Here's the list of my available slash commands: \n\n";return this.commands.forEach(e=>{t+="Command: /"+e.name+"\n",t+="Description: "+e.description+"\n\n"}),t}async importFile(e){return(await Promise.resolve().then(()=>(0,tslib_1.__importStar)(require(e))))?.default}async getFiles(t){const e=await(0,promises_1.readdir)(t),i=await Promise.all(e.map(async e=>{e=(0,path_1.resolve)(t,e);return(await(0,promises_1.stat)(e)).isDirectory()?this.getFiles(e):e}));return i.reduce((e,t)=>e.concat(t),[])}async findGuildChannel(t,i){return __1.client.channels.cache.find(e=>e.type===i&&e.name===t)}clientInteractionInfos(e,t){let i="";i+=String("\n\nNEW "+e.type+" INTERACTION: "+e.id),i+=String("\n   Interaction-TS: "+e.createdTimestamp),i+=String("\n   User: "+e.member.user.username),i+=String("\n       ID: "+e.member.user.id),i+=String("\n   Guild: "+e.guild.name),i+=String("\n       ID: "+e.guild.id),i+=String("\n\n       Logged-Members: ");let s=e.guild.presences.cache;s.forEach(e=>{i+=String("\n           ID: "+e.user.id),i+=String("\n           User: "+e.user.username)}),i+=String("\n\n       All-Members: ");let r=e.guild.members.cache;r.forEach(e=>{i+=String("\n           ID: "+e.user.id),i+=String("\n           User: "+e.user.username)}),t.info(i)}}exports.ExtendedClient=ExtendedClient;